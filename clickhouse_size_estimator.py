# Run with:
# streamlit run clickhouse_size_estimator.py
import streamlit as st
import sqlparse
import re

# –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–π—Ç–∞—Ö
type_size_map = {
    "UInt8": 1, "Int8": 1,
    "UInt16": 2, "Int16": 2,
    "UInt32": 4, "Int32": 4, "Float32": 4,
    "UInt64": 8, "Int64": 8, "Float64": 8,
    "Date": 2,
    "DateTime": 8,
    "Enum8": 1,
    "Enum16": 2,
    "String": 50,         # —Å—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏
    "FixedString": 50     # –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω—è—Ç—å
}

# –ü–µ—Ä–µ–≤–æ–¥ –≤ –ì–ë
def to_gb(bytes_val):
    return round(bytes_val / (1024 ** 3), 2)

# –ü–∞—Ä—Å–∏–Ω–≥ CREATE TABLE
def parse_create_table(sql):
    columns = []
    parsed = sqlparse.parse(sql)[0]
    tokens = parsed.tokens

    table_def_start = False
    for token in tokens:
        if isinstance(token, sqlparse.sql.Parenthesis):
            table_def_start = True
            col_defs = token.value.strip('() \n').split(',')
            for col_def in col_defs:
                parts = re.split(r'\s+', col_def.strip(), maxsplit=2)
                if len(parts) >= 2:
                    col_name = parts[0].strip('`"')
                    col_type = parts[1].split('(')[0]  # —É–±—Ä–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–∞–∫ –≤ FixedString(100)
                    columns.append((col_name, col_type))
    return columns

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.set_page_config(page_title="ClickHouse Size Estimator", layout="centered")
st.title("üì¶ –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã ClickHouse –ø–æ CREATE TABLE")

create_sql = st.text_area("–í—Å—Ç–∞–≤—å –∫–æ–º–∞–Ω–¥—É `CREATE TABLE`:")

row_count = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫", min_value=1000, value=10_000_000, step=1000)

if st.button("üîç –†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    if not create_sql.lower().startswith("create table"):
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π `CREATE TABLE` SQL.")
    else:
        columns = parse_create_table(create_sql)
        if not columns:
            st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏. –ü—Ä–æ–≤–µ—Ä—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å.")
        else:
            st.subheader("üìÑ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:")
            for name, dtype in columns:
                st.write(f"- **{name}**: `{dtype}`")

            total_row_size = 0
            for _, dtype in columns:
                dtype_base = dtype.split('(')[0]
                size = type_size_map.get(dtype_base, 50)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ String
                total_row_size += size

            raw_size = total_row_size * row_count
            compression_ratio = 4
            compressed_size = raw_size / compression_ratio
            recommended_disk = compressed_size * 2.5

            st.markdown("## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
            st.write(f"**–†–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏:** `{total_row_size}` –±–∞–π—Ç")
            st.write(f"**–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:** `{to_gb(raw_size)} –ì–ë`")
            st.write(f"**–ü–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è:** `{to_gb(compressed_size)} –ì–ë`")
            st.write(f"**–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –º–∏–Ω–∏–º—É–º –Ω–∞ –¥–∏—Å–∫:** `{to_gb(recommended_disk)} –ì–ë`")
